#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from math import floor
from os import environ
from shutil import get_terminal_size
from subprocess import PIPE, run
from typing import List


def git_file_log(path: str) -> bytes:
  ret = run(["git", "log", "--relative-date", "--color=always",
             "--pretty=format:%Cgreen%h%Creset %Cblue%ad%Creset %s", path],
            stdout=PIPE,
            stderr=PIPE)
  if ret.stderr:
    raise Exception(ret.stderr.decode())
  else:
    return ret.stdout


def git_show_file(path: str, sha: str) -> str:
  ret = run(["git", "show", f"{sha}:{path}"],
            stdout=PIPE,
            stderr=PIPE)
  if ret.stderr:
    raise Exception(ret.stderr.decode())
  else:
    return ret.stdout.decode()


def git_show_diff(diff: int, path: str, sha: str) -> bytes:
  ret = run(["git", "diff", f"--unified={diff}",
             f"{sha}~", sha, "--", path],
            stdout=PIPE,
            stderr=PIPE)
  if ret.stderr:
    raise Exception(ret.stderr.decode())
  else:
    return ret.stdout


def fzf_print(diff: int, path: str, commits: bytes) -> None:
  name = __file__
  exe = f"{name} {path} --show-sha {{+1}}"
  bind = f"--bind=return:abort+execute:{exe}"
  preview_win = "--preview-window=right:70%:wrap"
  diff_arg = f"--diff={diff}" if diff >= 0 else ""
  preview = f"{name} {diff_arg} --preview-sha={{1}} {path}"
  run(["fzf", "--ansi", "-m", bind, preview_win, f"--preview={preview}"],
      input=commits)


def prettify_file(path: str, text: str) -> str:
  try:
    from pygments import highlight
    from pygments.formatters import get_formatter_by_name
    from pygments.lexers import get_lexer_for_filename, guess_lexer
    from pygments.lexers.special import TextLexer
    from pygments.styles import get_style_by_name

    def get_lexer(file_name):
      try:
        return get_lexer_for_filename(file_name)
      except:
        try:
          shebang, _ = text.split("\n", 1)
          return guess_lexer(shebang)
        except:
          return TextLexer()
    style = get_style_by_name("friendly")
    formatter = get_formatter_by_name("terminal16m", style=style)
    return highlight(text,
                     lexer=get_lexer(path),
                     formatter=formatter)
  except:
    return text


def prettify_diff(diff: bytes) -> None:
  cols, _ = get_terminal_size()
  width = floor(cols * 0.7) - 8
  pager = environ.get("GIT_PAGER", "tee")
  if pager:
    cmd = next(iter(pager.split("|", 1)))
    prog, *args = cmd.split(" ")
    if prog == "delta":
      width = int(environ["FZF_PREVIEW_COLUMNS"]) - 2
      args.extend(("--width", str(width)))
    run([prog, *(a for a in args if a)], input=diff)
  else:
    print(diff.decode())


def fzf_preview(diff: int, sha: str, path: str) -> None:
  if diff >= 0:
    diff = git_show_diff(diff, path, sha)
    prettify_diff(diff)
  else:
    content = git_show_file(path, sha)
    prettied = prettify_file(path, content)
    print(prettied)


def parse_args() -> Namespace:
  parser = ArgumentParser()
  parser.add_argument("path")
  parser.add_argument("--preview-sha")
  parser.add_argument("-d", "--diff", type=int, default=-1)
  parser.add_argument("--show-sha", nargs="+", default=[])
  return parser.parse_args()


def main() -> None:
  args = parse_args()
  if args.show_sha:
    for sha in args.show_sha:
      print(f"git show {sha}:{args.path}")
  elif args.preview_sha:
    fzf_preview(
        args.diff,
        args.preview_sha,
        args.path)
  else:
    commits = git_file_log(args.path)
    fzf_print(args.diff, args.path, commits)


main()
