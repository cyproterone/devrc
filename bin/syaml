#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from locale import strxfrm
from shutil import get_terminal_size
from subprocess import run
from sys import stderr, stdin
from typing import Any, Callable

from yaml import BaseDumper, SafeDumper, add_representer, safe_dump_all, safe_load_all
from yaml.nodes import ScalarNode
from yaml.scanner import ScannerError


def recur_sort(data: Any) -> Any:
    if type(data) is dict:
        return {k: recur_sort(data[k]) for k in sorted(data, key=strxfrm)}
    elif type(data) is list:
        return [recur_sort(el) for el in data]
    else:
        return data


def parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("-i", "--indent", type=int, default=2)
    parser.add_argument("-p", "--pretty", action="store_true")
    return parser.parse_args()


def repr_str(width: int) -> Callable[[BaseDumper, str], ScalarNode]:
    def repr_str(dumper: BaseDumper, data: str) -> ScalarNode:
        style = "|" if len(data) > width else ""
        return dumper.represent_scalar("tag:yaml.org,2002:str", data, style=style)

    return repr_str


def main() -> None:
    args = parse_args()
    data = stdin.read()

    max_w = 80
    cols, _ = get_terminal_size((max_w, -1))
    cols = min(cols, max_w)
    add_representer(str, repr_str(max_w), Dumper=SafeDumper)

    try:
        yaml = [*safe_load_all(data)]
    except ScannerError:
        print(f"ERROR! -- Failed to parse:\n\n{data}", file=stderr)
        exit(1)
    else:
        new = recur_sort(yaml)
        dump = safe_dump_all(new, allow_unicode=True, width=cols, indent=args.indent)
        if args.pretty:
            ret = run(["prettier", "--stdin-filepath", "_.yaml"], input=dump.encode())
            exit(ret.returncode)
        else:
            print(dump, end="")


main()
